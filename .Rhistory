for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:18)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
str(trainx)
display(readImage(myTestPic[[2]]))
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
readImage("Image/HD1.jpg")
pics <- c('Image/HD1.jpg', 'Image/HD2.jpg', 'Image/HD3.jpg', 'Image/HD4.jpg', 'Image/HD5.jpg', 'Image/HD6.jpg', 'Image/HD7.jpg', 'Image/HD8.jpg', 'Image/HD9.jpg', 'Image/P1.jpg', 'Image/P2.jpg', 'Image/P3.jpg', 'Image/P4.jpg', 'Image/P5.jpg', 'Image/P6.jpg', 'Image/P7.jpg', 'Image/P8.jpg', 'Image/P9.jpg')
testPics <- c("TestImage/HDTest.jpg","TestImage/PTest.jpg")
myPic <- list()
myTestPic <- list()
for (i in 1:18)
{
myPic[[i]] <- readImage(pics[i])
}
for (i in 1:2)
{
myTestPic[[i]] <- readImage(testPics[i])
}
print(readImage(pics[3]))
print(myPic[[1]])
display(myPic[[8]])
summary(myPic[[1]])
hist(myPic[[2]])
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- resize(myPic[[i]], 225, 225)
}
for (i in 1:2)
{
myTestPic[[i]] <- resize(myTestPic[[i]], 225, 225)
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
str(myPic)
plot(pressure)
trainLables <- to_categorical(trainy)
#keras is a high level neural network API for deep learning from TenserFlow Google.
devtools::install_github("rstudio/tensorflow")
install.packages("tensor")
#keras is a high level neural network API for deep learning from TenserFlow Google.
devtools::install_github("rstudio/tensorflow")
install.packages("devtools")
install.packages("devtools")
#keras is a high level neural network API for deep learning from TenserFlow Google.
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow()
#install_keras()
library(keras)
library(tensorflow)
install_tensorflow()
trainLables <- to_categorical(trainy)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
install_tensorflow(version = "1.0.0")
install_tensorflow()
#keras is a high level neural network API for deep learning from TenserFlow Google.
devtools::install_github("keras/tensorflow")
#keras is a high level neural network API for deep learning from TenserFlow Google.
devtools::install_github("rstudio/keras")
install_tensorflow()
#install_keras()
library(keras)
install_tensorflow()
install_tensorflow(gpu=TRUE)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
readImage("Image/HD1.jpg")
pics <- c('Image/HD1.jpg', 'Image/HD2.jpg', 'Image/HD3.jpg', 'Image/HD4.jpg', 'Image/HD5.jpg', 'Image/HD6.jpg', 'Image/HD7.jpg', 'Image/HD8.jpg', 'Image/HD9.jpg', 'Image/P1.jpg', 'Image/P2.jpg', 'Image/P3.jpg', 'Image/P4.jpg', 'Image/P5.jpg', 'Image/P6.jpg', 'Image/P7.jpg', 'Image/P8.jpg', 'Image/P9.jpg')
testPics <- c("TestImage/HDTest.jpg","TestImage/PTest.jpg")
myPic <- list()
myTestPic <- list()
for (i in 1:18)
{
myPic[[i]] <- readImage(pics[i])
}
for (i in 1:2)
{
myTestPic[[i]] <- readImage(testPics[i])
}
print(readImage(pics[3]))
print(myPic[[1]])
display(myPic[[8]])
summary(myPic[[1]])
hist(myPic[[2]])
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- resize(myPic[[i]], 225, 225)
}
for (i in 1:2)
{
myTestPic[[i]] <- resize(myTestPic[[i]], 225, 225)
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
trainLables <- to_categorical(trainy)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
readImage("Image/HD1.jpg")
pics <- c('Image/HD1.jpg', 'Image/HD2.jpg', 'Image/HD3.jpg', 'Image/HD4.jpg', 'Image/HD5.jpg', 'Image/HD6.jpg', 'Image/HD7.jpg', 'Image/HD8.jpg', 'Image/HD9.jpg', 'Image/P1.jpg', 'Image/P2.jpg', 'Image/P3.jpg', 'Image/P4.jpg', 'Image/P5.jpg', 'Image/P6.jpg', 'Image/P7.jpg', 'Image/P8.jpg', 'Image/P9.jpg')
testPics <- c("TestImage/HDTest.jpg","TestImage/PTest.jpg")
myPic <- list()
myTestPic <- list()
for (i in 1:18)
{
myPic[[i]] <- readImage(pics[i])
}
for (i in 1:2)
{
myTestPic[[i]] <- readImage(testPics[i])
}
print(readImage(pics[3]))
print(myPic[[1]])
display(myPic[[8]])
summary(myPic[[1]])
hist(myPic[[2]])
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- resize(myPic[[i]], 225, 225)
}
for (i in 1:2)
{
myTestPic[[i]] <- resize(myTestPic[[i]], 225, 225)
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
trainLables <- to_categorical(trainy)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
library(tensorflow)
install_tensorflow(package_url = "https://pypi.python.org/packages/b8/d6/af3d52dd52150ec4a6ceb7788bfeb2f62ecb6aa2d1172211c4db39b349a2/tensorflow-1.3.0rc0-cp27-cp27mu-manylinux1_x86_64.whl#md5=1cf77a2360ae2e38dd3578618eacc03b")
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
library(tensorflow)
install_tensorflow(package_url = "https://pypi.python.org/packages/b8/d6/af3d52dd52150ec4a6ceb7788bfeb2f62ecb6aa2d1172211c4db39b349a2/tensorflow-1.3.0rc0-cp27-cp27mu-manylinux1_x86_64.whl#md5=1cf77a2360ae2e38dd3578618eacc03b")
trainLables <- to_categorical(trainy)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
library(tensorflow)
#install_tensorflow(package_url = "https://pypi.python.org/packages/b8/d6/af3d52dd52150ec4a6ceb7788bfeb2f62ecb6aa2d1172211c4db39b349a2/tensorflow-1.3.0rc0-cp27-cp27mu-manylinux1_x86_64.whl#md5=1cf77a2360ae2e38dd3578618eacc03b")
trainLables <- to_categorical(trainy)
testLables <- to_categorical(testy)
trainLables
testLables
str(triainx)
str(trainx)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(trainx,
trainLables,
epochs = 30,
batch_size = 32,
validation_split = 0.2)
```{r pressure}
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
```{r pressure}
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(trainx,
trainLables,
epochs = 30,
batch_size = 32,
validation_split = 0.2)
plot(history)
model %>% evaluate(trainx, trainLables)
pred <- model %>% predict_classes(trainx)
pred
history <- model %>%
fit(trainx,
trainLables,
epochs = 60,
batch_size = 32,
validation_split = 0.2)
plot(history)
history <- model %>%
fit(trainx,
trainLables,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
plot(history)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model %>%
layer_dense(units = 644, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 322, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model <- keras_model_sequential()
model %>%
layer_dense(units = 644, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 322, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(trainx,
trainLables,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
plot(history)
model %>% evaluate(trainx, trainLables)
pred <- model %>% predict_classes(trainx)
pred
table(Predicted = pred, Actual = trainy)
prob <- model %>% predict_proba(trainx)
cbind(prob, Prected = pred, Actual= trainy)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
library(tensorflow)
#install_tensorflow(package_url = "https://pypi.python.org/packages/b8/d6/af3d52dd52150ec4a6ceb7788bfeb2f62ecb6aa2d1172211c4db39b349a2/tensorflow-1.3.0rc0-cp27-cp27mu-manylinux1_x86_64.whl#md5=1cf77a2360ae2e38dd3578618eacc03b")
readImage("Image/HD1.jpg")
pics <- c('Image/HD1.jpg', 'Image/HD2.jpg', 'Image/HD3.jpg', 'Image/HD4.jpg', 'Image/HD5.jpg', 'Image/HD6.jpg', 'Image/HD7.jpg', 'Image/HD8.jpg', 'Image/HD9.jpg', 'Image/P1.jpg', 'Image/P2.jpg', 'Image/P3.jpg', 'Image/P4.jpg', 'Image/P5.jpg', 'Image/P6.jpg', 'Image/P7.jpg', 'Image/P8.jpg', 'Image/P9.jpg')
testPics <- c("TestImage/HDTest.jpg","TestImage/PTest.jpg")
myPic <- list()
myTestPic <- list()
for (i in 1:18)
{
myPic[[i]] <- readImage(pics[i])
}
for (i in 1:2)
{
myTestPic[[i]] <- readImage(testPics[i])
}
print(readImage(pics[3]))
print(myPic[[1]])
display(myPic[[8]])
summary(myPic[[1]])
hist(myPic[[2]])
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- resize(myPic[[i]], 225, 225)
}
for (i in 1:2)
{
myTestPic[[i]] <- resize(myTestPic[[i]], 225, 225)
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
str(trainx)
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
trainLables <- to_categorical(trainy)
trainLables
testLables <- to_categorical(testy)
testLables
model <- keras_model_sequential()
model %>%
layer_dense(units = 644, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 322, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(trainx,
trainLables,
epochs = 20,
batch_size = 32,
validation_split = 0.2)
plot(history)
model %>% evaluate(trainx, trainLables)
pred <- model %>% predict_classes(trainx)
pred
table(Predicted = pred, Actual = trainy)
prob <- model %>% predict_proba(trainx)
cbind(prob, Prected = pred, Actual= trainy)
#install.packages("BiocManager")
#BiocManager::install("EBImage")
library(EBImage)
#install_keras()
library(keras)
#keras is a high level neural network API for deep learning from TenserFlow Google.
#devtools::install_github("rstudio/keras")
library(tensorflow)
#install_tensorflow(package_url = "https://pypi.python.org/packages/b8/d6/af3d52dd52150ec4a6ceb7788bfeb2f62ecb6aa2d1172211c4db39b349a2/tensorflow-1.3.0rc0-cp27-cp27mu-manylinux1_x86_64.whl#md5=1cf77a2360ae2e38dd3578618eacc03b")
readImage("Image/HD1.jpg")
pics <- c('Image/HD1.jpg', 'Image/HD2.jpg', 'Image/HD3.jpg', 'Image/HD4.jpg', 'Image/HD5.jpg', 'Image/HD6.jpg', 'Image/HD7.jpg', 'Image/HD8.jpg', 'Image/HD9.jpg', 'Image/P1.jpg', 'Image/P2.jpg', 'Image/P3.jpg', 'Image/P4.jpg', 'Image/P5.jpg', 'Image/P6.jpg', 'Image/P7.jpg', 'Image/P8.jpg', 'Image/P9.jpg')
testPics <- c("TestImage/HDTest.jpg","TestImage/PTest.jpg")
myPic <- list()
myTestPic <- list()
for (i in 1:18)
{
myPic[[i]] <- readImage(pics[i])
}
for (i in 1:2)
{
myTestPic[[i]] <- readImage(testPics[i])
}
print(readImage(pics[3]))
print(myPic[[1]])
display(myPic[[8]])
summary(myPic[[1]])
hist(myPic[[2]])
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- resize(myPic[[i]], 225, 225)
}
for (i in 1:2)
{
myTestPic[[i]] <- resize(myTestPic[[i]], 225, 225)
}
str(myPic)
for (i in 1:18)
{
myPic[[i]] <- array_reshape(myPic[[i]], c(225, 225, 3))
}
for (i in 1:2)
{
myTestPic[[i]] <- array_reshape(myTestPic[[i]], c(225, 225, 3))
}
str(myTestPic)
trainx <- NULL
for (i in 1:18)
{
trainx <- rbind(trainx, myPic[[i]])
}
str(trainx)
testx <- rbind(myTestPic[[1]], myTestPic[[2]])
trainy <- c(0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
testy <- c(0,1)
trainLables <- to_categorical(trainy)
trainLables
testLables <- to_categorical(testy)
testLables
model <- keras_model_sequential()
model %>%
layer_dense(units = 644, activation = 'relu', input_shape = c(151875)) %>%
layer_dense(units = 322, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
summary(model)
model %>%
compile(loss = "binary_crossentropy",
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
history <- model %>%
fit(trainx,
trainLables,
epochs = 30,
batch_size = 32,
validation_split = 0.2)
plot(history)
model %>% evaluate(trainx, trainLables)
pred <- model %>% predict_classes(trainx)
pred
table(Predicted = pred, Actual = trainy)
prob <- model %>% predict_proba(trainx)
cbind(prob, Prected = pred, Actual= trainy)
